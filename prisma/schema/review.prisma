// Review related models for capturing and managing reviews
// All models are linked to an organization following the multi-tenant pattern

model ReviewPage {
  id             String       @id @default(nanoid(11))
  slug           String       @unique @default(nanoid(6))
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Name field for easy listing
  name String

  // JSON config for customization (type-safe with Prisma)
  config Json

  // Relations
  reviews   Review[]
  analytics ReviewPageAnalytics[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([slug])
}

model Review {
  id String @id @default(nanoid(11))

  // Review content
  text     String?      @db.Text
  videoId  String? // Mux video ID
  videoUrl String? // Mux playback URL
  status   ReviewStatus @default(PENDING)

  // Author info
  authorName  String
  authorEmail String
  authorRole  String?
  authorImage String?

  // Relations
  pageId         String
  page           ReviewPage      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tags           TagsOnReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([pageId])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Tag {
  id             String       @id @default(nanoid(11))
  label          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  reviews TagsOnReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, label])
  @@index([organizationId])
}

// Junction table for many-to-many relation between Review and Tag
model TagsOnReviews {
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([reviewId, tagId])
  @@index([reviewId])
  @@index([tagId])
}

// Analytics model for tracking page events
model ReviewPageAnalytics {
  id          String   @id @default(nanoid(11))
  date        DateTime @db.Date // Store daily stats
  views       Int      @default(0)
  submissions Int      @default(0)

  // Relations
  pageId String
  page   ReviewPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pageId, date])
  @@index([pageId])
  @@index([date])
}
